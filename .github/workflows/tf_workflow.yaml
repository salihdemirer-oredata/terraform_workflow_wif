name: "Terraform Workflow"

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - closed

jobs:
  pr:
    permissions:
      contents: read
      id-token: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: Checkout repository
        uses: actions/checkout@v3
      
      - id: gcp-auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ vars.WIF_PROVIDER }}
          service_account: ${{ vars.SERVICE_ACCOUNT }}
          access_token_lifetime: 3600s

      - id: gcp-sdk
        name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          install_components: alpha

      - id: tf-setup
        name: Set up Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ vars.TF_VERSION }}

      - id: tf-init
        name: Terraform init
        continue-on-error: true
        run: |
          terraform init -no-color

      - id: tf-validate
        name: Terraform validate
        continue-on-error: true
        run: terraform validate -no-color

      - id: tf-plan
        name: Terraform plan
        continue-on-error: true
        run: |
          terraform plan -input=false -no-color

      # - id: exit
      #   name: exit
      #   if: ${ steps.tf-plan.outcome } != success()
      #   run: |
      #     terraform plan -input=false -out ../plan.out -no-color

      - id: tf-apply
        if: github.event.pull_request.merged == true && success() && echo $? == 0 
        name: Terraform apply
        continue-on-error: true
        run: |
          terraform apply -input=false -auto-approve -no-color

      - id: pr-comment
        name: Post comment to Pull Request
        continue-on-error: true
        uses: actions/github-script@v6
        #if: github.event_name == 'pull_request'
        env:
          PLAN: $${{ steps.tf-plan.outputs.stdout }}\n$${{ steps.tf-plan.outputs.stderr }}
        with:
          script: |
            const output = `### Terraform Initialization \`$${{ steps.tf-init.outcome }}\`

            ### Terraform Validation \`$${{ steps.tf-validate.outcome }}\`

            <details><summary>Validation Output</summary>

            \`\`\`\n
            $${{ steps.tf-validate.outputs.stdout }}
            \`\`\`

            </details>

            ### Terraform Plan \`$${{ steps.tf-plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            $${process.env.PLAN.split('\n').filter(l => l.match(/^([A-Z\s].*|)$$/)).join('\n')}
            \`\`\`

            </details>

            ### Terraform Apply \`$${{ steps.tf-apply.outcome }}\`

            *Pusher: @$${{ github.actor }}, Action: \`$${{ github.event_name }}\`, Working Directory: \`$${{ env.tf_actions_working_dir }}\`, Workflow: \`$${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - id: pr-short-comment
        name: Post comment to Pull Request
        uses: actions/github-script@v6
        #if: github.event_name == 'pull_request' && steps.pr-comment.outcome != 'success'
        if: steps.pr-comment.outcome != 'success'
        with:
          script: |
            const output = `### Terraform Initialization \`$${{ steps.tf-init.outcome }}\`

            ### Terraform Validation \`$${{ steps.tf-validate.outcome }}\`

            ### Terraform Plan \`$${{ steps.tf-plan.outcome }}\`

            Plan output is in the action log.

            ### Terraform Apply \`$${{ steps.tf-apply.outcome }}\`

            *Pusher: @$${{ github.actor }}, Action: \`$${{ github.event_name }}\`, Working Directory: \`$${{ env.tf_actions_working_dir }}\`, Workflow: \`$${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })